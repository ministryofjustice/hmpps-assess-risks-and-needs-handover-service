package uk.gov.justice.digital.hmpps.hmppsassessrisksandneedshandoverservice.context.controller

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.tags.Tag
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.security.access.prepost.PreAuthorize
import org.springframework.security.core.context.SecurityContextHolder
import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.PostMapping
import org.springframework.web.bind.annotation.RequestBody
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController
import uk.gov.justice.digital.hmpps.hmppsassessrisksandneedshandoverservice.context.entity.HandoverContext
import uk.gov.justice.digital.hmpps.hmppsassessrisksandneedshandoverservice.context.request.UpdateHandoverContextRequest
import uk.gov.justice.digital.hmpps.hmppsassessrisksandneedshandoverservice.context.service.GetHandoverContextResult
import uk.gov.justice.digital.hmpps.hmppsassessrisksandneedshandoverservice.context.service.HandoverContextService

@RestController
@RequestMapping("\${app.self.endpoints.context}")
@Tag(name = "Handover Context", description = "APIs for handling handover context")
class HandoverContextController(
  val handoverContextService: HandoverContextService,
) {

  @PreAuthorize("@jwt.isIssuedByHmppsAuth() and @jwt.isClientCredentialsGrant()")
  @PostMapping("/{handoverSessionId}")
  @Operation(
    summary = "Update the handover context",
    description = "Updates the context for a given handover session ID. " +
      "**Authorization for this endpoint requires a client credentials JWT provided by HMPPS Auth.**",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "Context updated successfully",
        content = [Content(schema = Schema(implementation = HandoverContext::class))],
      ),
      ApiResponse(responseCode = "400", description = "Invalid request"),
      ApiResponse(responseCode = "401", description = "Unauthorized"),
      ApiResponse(responseCode = "403", description = "Forbidden"),
      ApiResponse(responseCode = "404", description = "Handover session not found"),
    ],
  )
  fun updateContext(
    @Parameter(description = "Handover session ID") @PathVariable handoverSessionId: String,
    @RequestBody handoverContext: UpdateHandoverContextRequest,
  ): ResponseEntity<Any> {
    return when (val result = handoverContextService.updateContext(handoverSessionId, handoverContext)) {
      is GetHandoverContextResult.Success ->
        ResponseEntity
          .ok(result.handoverContext)
      GetHandoverContextResult.NotFound ->
        ResponseEntity
          .status(HttpStatus.NOT_FOUND)
          .body("No handover context found for session ID $handoverSessionId")
    }
  }

  @PreAuthorize("@jwt.isIssuedByHmppsAuth() and @jwt.isClientCredentialsGrant()")
  @GetMapping("/{handoverSessionId}")
  @Operation(
    summary = "Get handover context by session ID",
    description = "Retrieves the context for a given handover session ID. " +
      "**Authorization for this endpoint requires a client credentials JWT provided by HMPPS Auth.**",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "Context retrieved successfully",
        content = [Content(schema = Schema(implementation = HandoverContext::class))],
      ),
      ApiResponse(responseCode = "401", description = "Unauthorized"),
      ApiResponse(responseCode = "403", description = "Forbidden"),
      ApiResponse(responseCode = "404", description = "Handover session not found"),
    ],
  )
  fun getContextByHandoverSessionId(
    @Parameter(description = "Handover session ID") @PathVariable handoverSessionId: String,
  ): ResponseEntity<Any> {
    return when (val result = handoverContextService.getContext(handoverSessionId)) {
      is GetHandoverContextResult.Success ->
        ResponseEntity
          .ok(result.handoverContext)
      GetHandoverContextResult.NotFound ->
        ResponseEntity
          .status(HttpStatus.NOT_FOUND)
          .body("No handover context found for session ID $handoverSessionId")
    }
  }

  @PreAuthorize("@jwt.isIssuedByHmppsHandover()")
  @GetMapping
  @Operation(
    summary = "Get handover context by authentication",
    description = "Retrieves the context for the authenticated user's handover session. " +
      "**Authorization for this endpoint requires an access token generated by HMPPS Handover.**",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "Context retrieved successfully",
        content = [Content(schema = Schema(implementation = HandoverContext::class))],
      ),
      ApiResponse(responseCode = "401", description = "Unauthorized"),
      ApiResponse(responseCode = "403", description = "Forbidden"),
      ApiResponse(responseCode = "404", description = "No handover context session found"),
    ],
  )
  fun getContextByAuthentication(): ResponseEntity<Any> {
    val handoverSessionId: String = SecurityContextHolder.getContext().authentication.name
    return when (val result = handoverContextService.getContext(handoverSessionId)) {
      is GetHandoverContextResult.Success ->
        ResponseEntity
          .ok(result.handoverContext)
      GetHandoverContextResult.NotFound ->
        ResponseEntity
          .status(HttpStatus.NOT_FOUND)
          .body("No handover context found for session ID $handoverSessionId")
    }
  }
}
